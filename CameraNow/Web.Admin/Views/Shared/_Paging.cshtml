@model PagingModel
@{
    int current_page = Model.CurrentPage;
    int count_page = Model.CountPages;
    var generateUrl = Model.GenerateUrl;

    if (current_page > count_page)
    {
        current_page = count_page;
    }

    if (count_page <= 1) return;

    int? preview = null;
    int? next = null;

    if (current_page > 1)
    {
        preview = current_page - 1;
    }

    if (current_page < count_page)
    {
        next = current_page + 1;
    }

    List<int> pages_range = new List<int>();

    int delta = 5;              // Số trang mở rộng về mỗi bên trang hiện tại\
    int remain = 2;             // Số trang hai bên trang hiện tại


    pages_range.Add(current_page);

    // Các trang phát triển về hai bên trang hiện tại
    for (int i = 1; i <= delta; i++)
    {
        if (current_page + i <= count_page)
        {
            pages_range.Add(current_page + i);
            remain--;
        }

        if (current_page - i >= 1)
        {
            pages_range.Insert(0, current_page - i);
            remain--;
        }
    }

    // Xử lý thêm vào các trang cho đủ remain
    //(xảy ra ở đầu mút của khoảng trang không đủ trang chèn  vào)
    if (remain > 0)
    {
        if (pages_range[0] == 1)
        {
            for (int i = 1; i <= remain; i++)
            {
                if (pages_range.Last() + 1 <= count_page)
                {
                    pages_range.Add(pages_range.Last() + 1);
                }
            }
        }
        else
        {
            for (int i = 1; i <= remain; i++)
            {
                if (pages_range.First() - 1 > 1)
                {
                    pages_range.Insert(0, pages_range.First() - 1);
                }
            }
        }
    }

}

@* PHÁT SINH HTML *@

<ul class="pagination">
    <!-- Previous page link -->
    @if (preview != null)
    {
        <li class="page-item">
            <a class="page-link" href="@generateUrl(preview)" data-page="@preview">&lt;&lt;</a>
        </li>
    }
    else
    {
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">&lt;&lt;</a>
        </li>
    }

    <!-- Numbered page links -->
    @foreach (var pageitem in pages_range)
    {
        if (pageitem != current_page)
        {
            <li class="page-item">
                <a class="page-link" href="@generateUrl(pageitem)" data-page="@pageitem">
                    @pageitem
                </a>
            </li>
        }
        else
        {
            <li class="page-item active" aria-current="page">
                <a class="page-link" href="#" data-page="@pageitem">@pageitem <span class="sr-only">(current)</span></a>
            </li>
        }
    }


    <!-- Next page link -->
    @if (next != null)
    {
        <li class="page-item">
            <a class="page-link" href="@generateUrl(next)" data-page="@next">&gt;&gt;</a>
        </li>
    }
    else
    {
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">&gt;&gt;</a>
        </li>
    }
</ul>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const pageLinks = document.querySelectorAll('.page-link[data-page]');

        pageLinks.forEach(link => {
            link.addEventListener('click', function () {
                const page = this.getAttribute('data-page');
                if (page) {
                    localStorage.setItem('current_page', page);
                }
            });
        });
    });
</script>
