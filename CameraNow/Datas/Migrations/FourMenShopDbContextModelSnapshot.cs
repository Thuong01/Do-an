// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Datas.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Datas.Migrations
{
    [DbContext(typeof(CameraNowContext))]
    partial class CameraNowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("rolenameindex");

                    b.ToTable("roles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_roleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_roleclaims_roleid");

                    b.ToTable("roleclaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userclaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userclaims_userid");

                    b.ToTable("userclaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerdisplayname");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_userlogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userlogins_userid");

                    b.ToTable("userlogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_userroles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_userroles_roleid");

                    b.ToTable("userroles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_usertokens");

                    b.ToTable("usertokens", "public");
                });

            modelBuilder.Entity("Models.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fullname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("PublicId")
                        .HasColumnType("text")
                        .HasColumnName("publicid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("emailindex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("usernameindex");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Models.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.ToTable("carts", "public");
                });

            modelBuilder.Entity("Models.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Cart_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_cartitems");

                    b.HasIndex("Cart_Id")
                        .HasDatabaseName("ix_cartitems_cart_id");

                    b.HasIndex("Product_Id")
                        .HasDatabaseName("ix_cartitems_product_id");

                    b.ToTable("cartitems", "public");
                });

            modelBuilder.Entity("Models.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("ApplyForCategoryIds")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("applyforcategoryids");

                    b.Property<List<string>>("ApplyForProductIds")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("applyforproductids");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<decimal>("MaxDiscountAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("maxdiscountamount");

                    b.Property<decimal>("MinOrderAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("minorderamount");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("UsedCount")
                        .HasColumnType("integer")
                        .HasColumnName("usedcount");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_coupons");

                    b.ToTable("coupons", "public");
                });

            modelBuilder.Entity("Models.Models.Error", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Creation_Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Stack_Trace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stack_trace");

                    b.HasKey("ID")
                        .HasName("pk_errors");

                    b.ToTable("errors", "public");
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int>("Likes")
                        .HasColumnType("integer")
                        .HasColumnName("likes");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid?>("Parent_ID")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("Product_ID")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ID")
                        .HasName("pk_feedbacks");

                    b.HasIndex("Product_ID")
                        .HasDatabaseName("ix_feedbacks_product_id");

                    b.HasIndex("User_ID")
                        .HasDatabaseName("ix_feedbacks_user_id");

                    b.ToTable("feedbacks", "public");
                });

            modelBuilder.Entity("Models.Models.FeedbackImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Feedback_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("feedback_id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Public_Id")
                        .HasColumnType("text")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_feedback_images");

                    b.HasIndex("Feedback_Id")
                        .HasDatabaseName("ix_feedback_images_feedback_id");

                    b.ToTable("feedback_images", "public");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddate");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("isread");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.ToTable("notifications", "public");
                });

            modelBuilder.Entity("Models.Models.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int?>("Coupon_Id")
                        .HasColumnType("integer")
                        .HasColumnName("coupon_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsCommented")
                        .HasColumnType("boolean")
                        .HasColumnName("iscommented");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("orderno");

                    b.Property<DateTime>("Order_Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<string>("Payment_Method")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("Total_Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("text")
                        .HasColumnName("transactionno");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ID")
                        .HasName("pk_orders");

                    b.HasIndex("User_Id")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", "public");
                });

            modelBuilder.Entity("Models.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Order_ID")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("Product_ID")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id")
                        .HasColumnOrder(2);

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Order_ID", "Product_ID")
                        .HasName("pk_order_details");

                    b.HasIndex("Product_ID")
                        .HasDatabaseName("ix_order_details_product_id");

                    b.ToTable("order_details", "public");
                });

            modelBuilder.Entity("Models.Models.PermissionGroups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permission_groups");

                    b.ToTable("permission_groups", "public");
                });

            modelBuilder.Entity("Models.Models.Permissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("groupname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParentName")
                        .HasColumnType("text")
                        .HasColumnName("parentname");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", "public");
                });

            modelBuilder.Entity("Models.Models.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int?>("Buy_Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("buy_count")
                        .HasDefaultValueSql("0");

                    b.Property<Guid?>("Category_ID")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Creation_By")
                        .HasColumnType("text")
                        .HasColumnName("creation_by");

                    b.Property<DateTime?>("Creation_Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Image_Public_Id")
                        .HasColumnType("text")
                        .HasColumnName("image_public_id");

                    b.Property<string>("Last_Modify_By")
                        .HasColumnType("text")
                        .HasColumnName("last_modify_by");

                    b.Property<DateTime?>("Last_Modify_Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modify_date");

                    b.Property<string>("Meta_Description")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("Meta_KeyWord")
                        .HasColumnType("text")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal?>("Promotion_Price")
                        .HasColumnType("numeric")
                        .HasColumnName("promotion_price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer")
                        .HasColumnName("remaining");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("ID")
                        .HasName("pk_products");

                    b.HasIndex("Category_ID")
                        .HasDatabaseName("ix_products_category_id");

                    b.ToTable("products", "public");
                });

            modelBuilder.Entity("Models.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("alias");

                    b.Property<string>("Creation_By")
                        .HasColumnType("text")
                        .HasColumnName("creation_by");

                    b.Property<DateTime?>("Creation_Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Image_Public_Id")
                        .HasColumnType("text")
                        .HasColumnName("image_public_id");

                    b.Property<string>("Last_Modify_By")
                        .HasColumnType("text")
                        .HasColumnName("last_modify_by");

                    b.Property<DateTime?>("Last_Modify_Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modify_date");

                    b.Property<string>("Meta_Description")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("Meta_KeyWord")
                        .HasColumnType("text")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(501)
                        .HasColumnType("character varying(501)")
                        .HasColumnName("name");

                    b.Property<Guid?>("Parent_ID")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("ID")
                        .HasName("pk_product_categories");

                    b.ToTable("product_categories", "public");
                });

            modelBuilder.Entity("Models.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Public_Id")
                        .HasColumnType("text")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("Product_Id")
                        .HasDatabaseName("ix_images_product_id");

                    b.ToTable("images", "public");
                });

            modelBuilder.Entity("Models.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date_Added")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("Date_Expire")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_expire");

                    b.Property<bool>("Is_Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<string>("Jwt_Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jwt_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refreshtokens");

                    b.HasIndex("User_Id")
                        .HasDatabaseName("ix_refreshtokens_user_id");

                    b.ToTable("refreshtokens", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roleclaims_roles_roleid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userclaims_users_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userlogins_users_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userroles_roles_roleid");

                    b.HasOne("Models.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userroles_users_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usertokens_users_userid");
                });

            modelBuilder.Entity("Models.Models.CartItem", b =>
                {
                    b.HasOne("Models.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("Cart_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartitems_carts_cart_id");

                    b.HasOne("Models.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cartitems_products_product_id");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.HasOne("Models.Models.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_products_product_id");

                    b.HasOne("Models.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.FeedbackImage", b =>
                {
                    b.HasOne("Models.Models.Feedback", "Feedback")
                        .WithMany("Images")
                        .HasForeignKey("Feedback_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedback_images_feedbacks_feedback_id");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("Models.Models.Order", b =>
                {
                    b.HasOne("Models.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.OrderDetail", b =>
                {
                    b.HasOne("Models.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_orders_order_id");

                    b.HasOne("Models.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Models.Product", b =>
                {
                    b.HasOne("Models.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("Category_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_products_product_categories_category_id");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Models.Models.ProductImage", b =>
                {
                    b.HasOne("Models.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Models.RefreshToken", b =>
                {
                    b.HasOne("Models.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refreshtokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Models.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Models.Models.Product", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Models.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
